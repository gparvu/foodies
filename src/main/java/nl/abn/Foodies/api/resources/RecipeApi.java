/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.abn.Foodies.api.resources;

import nl.abn.Foodies.api.model.RecipePayload;
import nl.abn.Foodies.dao.model.RecipeFilter;
import nl.abn.Foodies.service.RecipeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/recipes")
@Validated
public class RecipeApi {

    @Autowired
    private RecipeService recipeService;

    /**
     * POST /recipes : Add a new recipe
     *
     * @param recipe Create a new recipe (required)
     * @return Successful operation (status code 200)
     */
    @PostMapping
    public ResponseEntity<RecipePayload> addRecipe(@Valid
                                                   @RequestBody RecipePayload recipe) {
        RecipePayload createdRecipe = recipeService.createRecipe(recipe);

        return new ResponseEntity<>(createdRecipe, HttpStatus.OK);
    }

    /**
     * DELETE /recipes/{recipeId} : Deletes a recipe
     * delete a recipe
     *
     * @param recipeId recipe id to delete (required)
     * @return successful operation (status code 200)
     */
    @DeleteMapping("/{recipeId}")
    public ResponseEntity<Void> deleteRecipe(@PathVariable("recipeId") Integer recipeId) {
        recipeService.deleteRecipe(recipeId);

        return new ResponseEntity<>(HttpStatus.OK);
    }


    /**
     * GET /recipes : Finds recipes by multiple criterias
     * Multiple status values can be provided with comma separated strings
     *
     * @return successful operation (status code 200)
     */
    @GetMapping
    public ResponseEntity<java.util.List<RecipePayload>> findRecipesBy(
            @RequestParam String ofTypes,
            @RequestParam String notOfTypes,
            @RequestParam Integer noOfServings,
            @RequestParam String withIngredients,
            @RequestParam String mentioning) {

        RecipeFilter filter = new RecipeFilter();
        filter.setOfTypes(StringUtils.commaDelimitedListToSet(ofTypes));
        filter.setNotOfTypes(StringUtils.commaDelimitedListToSet(notOfTypes));
        filter.setNoOfServings(noOfServings);
        filter.setWithIngredients(StringUtils.commaDelimitedListToSet(withIngredients));
        filter.setMentioning(StringUtils.commaDelimitedListToSet(mentioning));

        List<RecipePayload> recipes = recipeService.findRecipesBy(filter);

        return new ResponseEntity<>(recipes, HttpStatus.OK);
    }


    /**
     * GET /recipes/{recipeId} : Find recipe by ID
     * Returns a single recipe
     *
     * @param recipeId ID of recipe to return (required)
     * @return successful operation (status code 200)
     * or recipe not found (status code 404)
     */
    @GetMapping("/{recipeId}")
    public ResponseEntity<RecipePayload> getRecipeById(@PathVariable("recipeId") Integer recipeId) {
        RecipePayload recipe = recipeService.getRecipe(recipeId);

        return new ResponseEntity<>(recipe, HttpStatus.OK);
    }


    /**
     * PUT /recipes : Update an existing recipePayload
     * Update an existing recipePayload by Id. Id will be used from the body. This will be a full update of the recipePayload
     *
     * @param recipePayload Update an existent recipePayload (required)
     * @return Successful operation (status code 200)
     *       or recipe not found (status code 404)
     */
    @PutMapping
    public ResponseEntity<RecipePayload> updateRecipe(@Valid @RequestBody RecipePayload recipePayload) {
        RecipePayload updatedRecipe = recipeService.updateRecipe(recipePayload);

        return new ResponseEntity<>(updatedRecipe, HttpStatus.OK);
    }

}
